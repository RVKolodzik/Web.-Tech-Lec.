Midterms Coverage
1) What is HTML?
2) What is HTML's role in modern web dev.
3) Who invented HTML?
4) Who oversees the dev. of HTML?
5) What are the versions of HTML?
6) Which documents specify the html standards?
7) What is the syntax of HTML?

1) What is HTML?
	-> Hypertext Mark-up Language
	-> Webpages
	-> Derived from SGML

2) What is the role of HTML in modern web dev.?
	-> Stucture & Content --> Modern HTML
	-> Presentational Aspects/Aethetics --> CSS
	-> Behavioral --> JS

3) Who Invented HTML?
	-> Sir Tim Berners-Lee

4) Who oversees the dev. of HTML?
	-> W3C

5) What are the versions of HTML?
	-> HTML 1.0 (original)
	-> HTML 2.0 - RFC 1866
  ----(After HTML 2.0 W3C handles recommendations)----
  	-> HTML 3.0
  			3.2
  			4.0
  			4.01 > Strict
  				 > Transitional
  				 > Frameset
  	-> XHTML (Extensible)
  		> Data Interchange
  			ex: <?xml ....?>
  				<student>
  					<idno>215...</idno>
  					<name>Sam...</name>
  				</student>
  		> 1.0
  		> 1.1
  		> 2.0

6) Which documents specify the HTML standards?
	-> W3C

7) What is the syntax of HTML?
	<!DOCTYPE html> ----> "standards", "quirks"
	<html> 			----> root element
	<head>			----> meta-information
	<body>			----> start tag; 'body' --> tag name
	</body>			----> end tag


	*Extra notes:
		Ian Hickson
			-> whatwg
			-> worked in evolution of html 4.01 to html5 2014
		Metadata
			-> not shown in html document
		DOM
			-> Document Object Model (extends in Java)

HTML Elements:
	html
		head
			title, base, link, meta, style
		body
			article, aside, have, section, header, footer, main
			address
			dw

			h1, h2, h3, h4, h5, h6
			p
			hr
			blockquote
			ol, ul
				li
			dl
				dt, dd
			figure
				figcaption
			a
			em, strong, small
			dfn, abbr
			ruby, rla, r#, rtc, rp
			date, time
			code, var, sawp, ksd
			sp, sub
			i, b, u, mark
			bdi, bdo
			span
			br, wbr
			ins, del
			table
				caption
				colgroup, col
				thead, tbody, tfoot
					tr
						th, td
			form
				label
				input

HTML Attributes:
	Global Attributes
	Element-Specific Attributes
	Data-* Attributes
	role, aria-* Attributes

WAIARIA, WCAG

=========================================================

Cascading Style Sheets (CSS)
	-> language used to specify the presentation aspects (eg. layout and formatting) of structurally marked up documents
	-> developed by Haikon Wium Lie (CHSS) and Bert Bos (SSP)
	-> reasons:
		- CSS1 (1996)
		- CSS 2.1 (2011) (Updated 2016)
		------(CSS1 and CSS 2.1 had centralized repo)--------
		- CSS 3 *(modules)* (Last Version)
			-> can be recommended if matured enough
			-> if not tagged with level 3 it is entirely new which was not added in CSS 2.1
	-> CSS Preprocessors, CSS Frameworks

HTML/XHTML Stylesheets
	-> author styles
	-> user style (overrides the author's style)
	-> user agent style (example default CSS 2.1 stylesheet for HTML 4)

CSS Statements
	-> @ - Rules
		> @charset
		> @import
		> @media
		> @font-face
		> @keyframes
		> @page

Author Styles
	-> external stylesheets (recommended --> link)
	-> embedded styles
	-> inline styles

Media
	-> screen
	-> print
	-> speech

CSS Rule Sets (aka CSS Rules, Style Rules)
	-> consists of a selection, followed by a brace-enclosed declaration block which contains zero or more semi-colon separated by .....


CSS Selectors
	-> selector
		> Structure used as a condition in a CSS rule to determine which elements in the document tree are matched by the selector and are thus targeted by the formatting specified in the CSS rule
	-> Selector Syntax
		> chain of one or more sequences of simple selectors separated by combinators, with one psuedo-element possibly appended to the last sequence
		> sequence of simple selectors
			--> chain of simple selectors but separated by combinators
			--> always start with a type selector or a universal selector
			--> cannot contain other type selectors or universal selectors
		> group selectors
			--> comma-separated list of selectors representing the union of all elements selected by each of the selectors in the list
		> sipmle selectors
			-->type selectors (ex: p, div, span)
			--> universal selectors (ex: *)
			--> attribute selectors
				[attr]
					[attr = value]
					[attr ~= value] (one value *class*)
					[attr |= value] (lang attr. ex: [lang |= en])
					[attr ^= value] (css 3)
					[attr $= value] (css 3)
					[attr *= value] (css 3)

						^ = start
						$ = end
						* = anywhere between

			--> class selectors
			--> ID selectors
			--> pseudo-class
				.) dynamic pseudo-class
					> link pseudo-class
						-> :link
						-> :visited
					> user action pseudo-classes
						-> :hover
						-> :active
						-> :focus
				.) target pseudo-class
					> :target (css3)

				.) language pseudo-class
					>: lang()

				.) UI element states pseudo-classes
					> :enabled
					> :disabled
					> :checked
					> :intermidiate
					--------(all UI element states -> css3)---------

				.) structural pseudo-classes
					> :root
					> :first-child
					> :last-child
					> :only-child
					> :nth-child()
					> :nth-last-child()
					> :first-of-type
					> :last-of-type
					> :only-of-type
					> :nth-of-type()
					> :nth-last-of-type()
					> :empty

					*nth = a(n) + b, odd, even
					--------(all but :first-child are introduced in css3)----------

		> combinators
			--> descendant combinator (whitespace, ie. space, tab, line feed, carriage return, form feed)
			--> child combinator (>)
			--> sibling combinators
				.) adjacent sibling combinator (+)
				.) general sibling combinator (~) *css3
		> pseudo-elements
			--> ::first-letter
			--> ::first-line
			--> ::before
			--> ::after
			----------(css3)-----------
			--> :first-letter
			--> :first-line
			--> :before
			--> :after
			----------(css2)-----------

CSS Rule Precedence
	1) by origin and importance (cascading origins, !important)
		- user agent important declarations
		- user important declarations
		- author important declarations
		- author normal declarations
		- user normal declarations
		- user agent normal declarations
	2) by specificity
		- inline style
		- # of ID selectors
		- # of class selectors, attriute selectors, and pseudo-classes
		- # of type selectors and pseudo-elements
	3) by order (last declaration)

CSS Declarations
	-> properties
		- shorthand properties
		- vendor-specific extensions (aka vendor prefixes)
	-> values
		- keywords
		- numbers (integers and reals in decimal notation)
		- dimensions
			> lenght, angle, duration, frequency, resolution
			> length units:
				.) font-relative: em ex ch rem
				.) viewport-percentage: vw vmin vmax
				.) absolute lengths: cm mm q in pt pc px
			> angle units: deg grad rad turn
			> duration units: s ms
			> frequency units: hz khz
			> resolution units: dpi dpcm dppx
		- percentages
		- URLs and URIs
		- colors
		- strings
	-> functions: calc() attr() counter() counters() linear-gradient() radial-gradient() translate() scale() rotate() etc.

=======================================================

- Web app becoming the norm
- Javascript global object at runtime environment
	-> window
	ex: window.navigator.vendor
		window.document
		   ^
		(implied)document
		document.getElementById('p')

- Document Object Model(DOM) defines the tree structure
- Element -> createElement();
	ex: h1.document.createElement('h1')
			<h1></h1>
		document.body.appendChild(h1)
		t = document.createText("header1")
			"header1"
		document.body.appendChild(h1)

Javascript 
	> Imperative mode of computation
		-> sequence of instructions in what the programmer wants
		-> variables
		-> "var" - implicitely from the value declares its data type
		-> implicitely typed

Variables
	> var
	> let
	> const

	- if it's just a variable without a type and using var, creates a new windows property
		let and const does not, it's simply stand alone objects
	- function scope
		-> local variable

Data Types
	- simple/primitive

Procedural abstraction
	- function (like method)
	- function is also an object
	- any non empty string are true
		ex: function sayHello(){
				console.log('Hello!');
			}

			sayHello() <- invoking
			sayHello   <- window object

	- all functions return a value anythign not defined is already defaulted as undefined

		ex:
			function greater(v1, v2){
				if(v1 > v2){
					return v1;
				}else if(v2 > v1){
					return v2;
				}
			}

			*returns undefined if the numbers are equal
	- a function is an anonymous function when the function is not given any name associated with the function

/* Function expressions ... */ (cannot be invoked)
(function (a,b){return a +b;})(10, 20);
								^ direct call

Name conflict
	-> same name of window object, the more objects the higher chance of name conflict (the less names, the better)

var add = new Function(a,b,'return a+b');
var sum = add(10,20);

----------------------------------------------

/* arrow syntax */
var multiply = (a,b) => {return a * b;}
				^ just like function(a,b){...}
var product = multiply(10,2);

var divide = (a,b) => a/b;
var quotient = divide(10,20);

functino with one argument:
var triple = n => 3*n;
var thrice = triple(5);

var zero = () => 0;
	^ function f(){return 0;}

----------------------------------------------

/* functions can be recursive... */
function factorial(n){
	if(n<0){
		throw "invalid argument";
	}else if(n == 0){
		return 1;
	} else {
		return n*factorial(n-1);
	}
}

----------------------------------------------

/* functions can be nested... */
function outer(){
	//some code here
	function inner(){		//function inner() can only be called within the function outer()
 		//some code here
	}
}

----------------------------------------------

/* 'this','arguments', and 'apply'... */
function args(){
	console.log(this);
	console.log(arguments.length);
	for(let I = 0; i < arguments.length; i++){
		console.log(aruments[i]);
	}
}

args();
args(1,2,3);
args.apply('hi',[1,2,3,4]);

*arguments object only exists inside the function

----------------------------------------------

/* function arguments can have default values */
functino fn(a = 10, b=20,c,d=40,e){
	console.log(`a = ${a}`);
	console.log(`b = ${b}`);
	console.log(`c = ${c}`);
	console.log(`d = ${d}`);
	console.log(`e = ${e}`);
}

----------------------------------------------

/* functino nest parameters */
function fn(a,b,...others){ 	//...others <- array
	console.log(`a = ${a}`);
	console.log(`b = ${b}`);
	console.log('others = ');
}

----------------------------------------------

/* Arrays */
var empty Array = new Array(); 	//array object constructor
var alsoEmptyArray = []; 		//array literal

var arrayWithLengthFive = new Array(5);
var arrayWithOneElement = [5];

var array = new Array('5');
var sameArray = ['5'];

*length value can be changed, not just read only; exists but not allocated, set of undefined
*Arrays are dynamic
* ... <- spread syntax

----------------------------------------------

/* array destructoring */
var array = [1,2,3,4,5];
var [a,b,c,d,e] = array;
var [,x,,y] = array;
var [m,n,...others] = array;

----------------------------------------------

/* array indices can be non-contiguous */
var array = [1,2,3,4,5];
array [10] = 10;
for(let i in array){
	console.log(i,array[i]);
}

var array = [1,2,3];
array.length = 10;

----------------------------------------------

Mutator Methods
	-> pop
	-> push
	-> reverse
	-> fill
	-> shift, unshift
	-> sort

Accessor Methods
	-> concat
	-> includes
	-> indexof
	-> join

Iteration Methods
	-> filter
	-> map
	-> findIndex
	-> every
	-> some
	-> reduce

----------------------------------------------

/* objects */
var emptyObj = new Object();	//object constructor
var alsoEmptyObj = {};			//object literal
var ObjObj = Object({});

----------------------------------------------

/* Object Properties and Methods */
var student = {};
student.idno = '21583921';
student['name'] = 'Doe';

----------------------------------------------

/* Constructor function */
function Person(name, age){
	this.name = name;
	this.age = age;
	this.speak = function () {
		console.log('Hello, I'm ${this.name}');
	}
	var p = new Person('me', 21);	//must be with new if not with new, it's a window obj
}